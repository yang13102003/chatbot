import streamlit as st
import google.generativeai as genai
import gspread
import json
from datetime import datetime

# =============== C·∫§U H√åNH GOOGLE SHEET ==================
service_account_info = json.loads(st.secrets["GOOGLE_APPLICATION_CREDENTIALS_JSON"])
gc = gspread.service_account_from_dict(service_account_info)
sheet_key = st.secrets["GOOGLE_SHEET_KEY"]
worksheet = gc.open_by_key(sheet_key).sheet1

# =============== C·∫§U H√åNH GEMINI ==================
genai.configure(api_key=st.secrets["GEMINI_API_KEY"])
model_name = "gemini-2.5-flash"

# =============== C·∫§U H√åNH GIAO DI·ªÜN TRANG ===============
st.set_page_config(page_title="C√¥ Uy√™n c√πng tr√≤ chuy·ªán üå∏", page_icon="ü§ñ", layout="centered")

# =============== CSS CHUNG ===============
def apply_css(bg_image):
    st.markdown(f"""
        <style>
        .stApp {{
            background-image: url("{bg_image}");
            background-size: cover;
            background-position: center;
            background-attachment: fixed;
        }}
        .title-box {{
            background-color: rgba(255, 255, 255, 0.7);
            border-radius: 20px;
            padding: 15px 25px;
            margin: 20px auto;
            width: fit-content;
            backdrop-filter: blur(10px);
            box-shadow: 0px 4px 10px rgba(0,0,0,0.2);
            text-align: center;
        }}
        h1, h2, h3, h4, h5, h6 {{
            color: #003366;
            text-shadow: 1px 1px 2px white;
        }}
        .stChatMessage {{
            background: rgba(255, 255, 255, 0.85);
            border-radius: 20px;
            padding: 12px 18px;
            margin: 8px 0;
            box-shadow: 0px 2px 8px rgba(0,0,0,0.1);
            backdrop-filter: blur(6px);
        }}
        .user-msg {{
            background-color: rgba(255, 255, 255, 0.8);
            border-left: 4px solid #6ec1e4;
            padding: 8px 12px;
            border-radius: 12px;
        }}
        .assistant-msg {{
            background-color: rgba(255, 255, 255, 0.9);
            border-left: 4px solid #f5b642;
            padding: 8px 12px;
            border-radius: 12px;
        }}
        </style>
    """, unsafe_allow_html=True)

# =============== TRANG NH·∫¨P T√äN H·ªåC SINH ===============
if "student_name" not in st.session_state:
    apply_css("https://drive.google.com/uc?export=view&id=1NaydE-AyThVLyT4LXm4eMZrJ0FthRl5j")
    st.markdown("<div class='title-box'><h1>üå∏ Xin ch√†o em! üå∏</h1><p>Nh·∫≠p t√™n ƒë·ªÉ c√¥ Uy√™n bi·∫øt em l√† ai nh√© üí¨</p></div>", unsafe_allow_html=True)
    name = st.text_input("üëß Nh·∫≠p t√™n c·ªßa em:")
    if st.button("B·∫Øt ƒë·∫ßu h·ªçc üíª"):
        if name.strip():
            st.session_state.student_name = name.strip()
            st.session_state.messages = []
            st.rerun()
        else:
            st.warning("Vui l√≤ng nh·∫≠p t√™n nha em üí°")
    st.stop()

# =============== TRANG CHATBOT ===============
apply_css("https://drive.google.com/uc?export=view&id=1MQbh76loPEZM6VYIhgvHMEtHvxOSrxIf")

st.markdown(f"""
<div class='title-box'>
    <h1>üí¨ C√¥ Uy√™n c√πng tr√≤ chuy·ªán v·ªõi em {st.session_state.student_name} üåº</h1>
    <p>(Tr·ª£ l√Ω ·∫£o h·ªçc t·∫≠p ‚Äì Ch·ªß ƒë·ªÅ Tin h·ªçc l·ªõp 3)</p>
</div>
""", unsafe_allow_html=True)

SYSTEM_CONTEXT = (
    "B·∫°n l√† Tr·ª£ l√Ω h·ªçc t·∫≠p th√¢n thi·ªán c·ªßa c√¥ gi√°o ƒê·∫∑ng T·ªë Uy√™n. "
    "X∆∞ng h√¥: c√¥ v√† em. "
    "Lu√¥n n√≥i ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu, d√πng l·ªùi l·∫Ω d·ªãu d√†ng nh∆∞ ƒëang d·∫°y h·ªçc sinh ti·ªÉu h·ªçc. "
    "N·∫øu h·ªçc sinh h·ªèi v·ªÅ Tin h·ªçc l·ªõp 3, h√£y gi·∫£ng gi·∫£i t·ª´ng b∆∞·ªõc r√µ r√†ng. "
    "N·∫øu h·ªçc sinh ch√†o h·ªèi ho·∫∑c t√¢m s·ª±, h√£y ph·∫£n h·ªìi nh·∫π nh√†ng, th√¢n thi·ªán. "
    "Kh√¥ng n√≥i v·ªÅ c√°c ch·ªß ƒë·ªÅ ngo√†i gi√°o d·ª•c ho·∫∑c kh√¥ng ph√π h·ª£p v·ªõi tr·∫ª em."
)

# Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
for msg in st.session_state.get("messages", []):
    with st.chat_message(msg["role"]):
        css_class = "user-msg" if msg["role"] == "user" else "assistant-msg"
        st.markdown(f"<div class='{css_class}'>{msg['content']}</div>", unsafe_allow_html=True)

# X·ª≠ l√Ω khi h·ªçc sinh nh·∫≠p c√¢u h·ªèi
if prompt := st.chat_input("Nh·∫≠p tin nh·∫Øn ƒë·ªÉ n√≥i chuy·ªán v·ªõi c√¥ üí¨"):
    st.chat_message("user").markdown(f"<div class='user-msg'>{prompt}</div>", unsafe_allow_html=True)
    st.session_state.messages.append({"role": "user", "content": prompt})
    try:
        model = genai.GenerativeModel(model_name)
        response = model.generate_content(f"{SYSTEM_CONTEXT}\nH·ªçc sinh h·ªèi: {prompt}")
        reply = response.text.strip() if response.text else "‚ö†Ô∏è C√¥ ch∆∞a nghe r√µ c√¢u h·ªèi, em n√≥i l·∫°i gi√∫p c√¥ nh√©!"
    except Exception as e:
        reply = f"‚ö†Ô∏è C√≥ l·ªói khi g·ªçi Gemini API: {e}"
        model_name = "gemini-2.5-pro"
        try:
            model = genai.GenerativeModel(model_name)
            response = model.generate_content(f"{SYSTEM_CONTEXT}\nH·ªçc sinh h·ªèi: {prompt}")
            reply = response.text.strip() if response.text else "C√¥ v·∫´n ch∆∞a nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi, th·ª≠ l·∫°i sau nha em üå∏"
        except Exception as e2:
            reply = f"‚ö†Ô∏è Model d·ª± ph√≤ng c≈©ng kh√¥ng tr·∫£ k·∫øt qu·∫£.\nL·ªói: {e2}"

    with st.chat_message("assistant"):
        st.markdown(f"<div class='assistant-msg'>{reply}</div>", unsafe_allow_html=True)

    # L∆∞u v√†o l·ªãch s·ª≠
    st.session_state.messages.append({"role": "assistant", "content": reply})

    # Ghi v√†o Google Sheet
    try:
        worksheet.append_row([
            datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            st.session_state.student_name,
            prompt,
            reply
        ])
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ l∆∞u v√†o Google Sheet: {e}")

